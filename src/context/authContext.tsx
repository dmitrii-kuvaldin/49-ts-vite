import { createContext, useContext, useEffect, useState } from "react";

interface IUser {
  accessToken?: string;
  email: string;
  firstName: string;
  gender: string;
  id: number;
  image: string;
  lastName: string;
  refreshToken: string;
  username?: string;
}

export const initialUser: IUser = {
  accessToken: "",
  email: "",
  firstName: "",
  gender: "",
  id: 0,
  image: "",
  lastName: "",
  refreshToken: "",
  username: ""
};

interface IAuthContextType {
  user: IUser;
  setUser: React.Dispatch<React.SetStateAction<IUser>>;
  isLoading: boolean;
  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>;
}

// ! —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é createContext()
export const AuthContext = createContext<IAuthContextType | undefined>(undefined);


// ! —Å–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç-–æ–±–µ—Ä—Ç–∫—É —Å –ø–æ–º–æ—â—å—é —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
// –Ω–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∞–Ω–Ω—ã–º–∏ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –∏—Ö –≤ value
export const AuthProvider = ({ children }: { children: React.ReactNode; }) => {
  const [user, setUser] = useState<IUser>(initialUser);
  const [isLoading, setIsLoading] = useState<boolean>(false);

  // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ –∫–æ—Ç–æ—Ä—É—é –ø—Ä–∏–¥–µ—Ç token –∏–∑ local storage —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
  const accessToken = localStorage.getItem('accessToken');

  useEffect(() => {
    if (accessToken) {
      fetch('https://dummyjson.com/auth/me', {
        method: 'GET',
        headers: {
          Authorization: `Bearer ${accessToken}`
        }
      })
        .then(res => res.json())
        .then(data => {
          setUser(data)
        });
    }
  }, []);

  return (
    <AuthContext.Provider value={{ user, setUser, setIsLoading, isLoading }}>
      {/* <h1>–ü—Ä–∏–≤–µ—Ç –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞</h1> */}
      {children}
    </AuthContext.Provider>
  );
};



// ! —Å–æ–∑–¥–∞–µ–º —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
// –≤–Ω—É—Ç—Ä–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç useContext() –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
// –¥–µ–ª–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ undefined
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('no such context! üòµ');
  }
  return context;
};
